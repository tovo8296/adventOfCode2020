package day18

import java.lang.IllegalArgumentException
import java.math.BigInteger

val input = """
9 + 2 * ((7 + 9 + 5 + 7) * 3 + (5 * 3 * 6 * 5 + 6) + (9 * 4 + 9 * 6 + 9)) * 8 + 5
(5 * 2 * 2 + (3 * 8 * 9 * 7) * 3 * 9) * (7 + 3 + (5 + 4 + 8 + 6) + 3 + 2 + 2) * 4 * 8
2 + 6 * (2 * (2 * 6) * 3 + (7 + 2 * 4 + 7)) * 8 + 5 * 4
7 + 5 + (8 * 6 + 8) * 6 + (4 * 3 + 5 * 8 + 7 * 9) + 5
((4 * 8 + 2 + 9 * 3 * 7) * (3 + 6 + 3 * 2 * 7 + 4) + 2 * (9 * 5) * 4 * 3) + 9 + (3 + 9 * 2 + 9 + (4 * 3) * (4 + 4 + 7 * 5 * 2 * 9)) * 4
(8 + 8 + 3) * 7 + (7 * 7 + 7)
9 + ((8 * 2 * 6 + 2 + 6) * 6 + 3 + 2 * 9) * 3 * ((7 * 4 + 6) * 5 * 6 + 4 * 5 + 5) + 2 + 2
((3 * 3 * 5 + 7 + 5 + 8) + 7 + 2 * (4 + 9 * 8 + 7 * 2)) + 6 + 3 * 7 + 6 + 9
(6 * 2 * 7) + (6 * 9 * 5 + 2 + (2 * 6 * 3) * 7) * (5 + 9 + 8 + 6 * 6) + 2
2 * 4 * 8 + 9 + ((9 + 5) + 9 * 7) * (7 * 7 * (2 * 5 + 2 + 4 + 6) * 5)
2 * 3 * 8 * (3 * 7 * 8 * 5) + 4
6 + ((8 * 3) * 2 * (7 * 2 + 5 + 2) + (9 * 2) * (2 + 3 * 9) * (5 + 9)) * 2 + 9
3 + 7 * 9 * 3 * (4 * 7 * 8 * 8 + 2)
(5 + 2 * 6 + 4 * 7) * (4 * 5 + 4 * 3 * 9) * (9 * 7) + 3 + 7
(5 + 6 + 8 + 8 * 2) * 2
9 + 2 * 4 + (9 + 2 + 9 + 4)
7 + 6 + (3 + 4 + 9 * 2 + (9 * 3 * 5 * 5 * 3)) * 5 + (8 + 6 * 8 * 4 + 5) * (3 + (6 + 7 + 5 + 4))
6 + 3 + 2 * ((7 + 3 + 8) + 2 + (9 * 6 + 4) * 3) + 3
8 + (3 + (7 + 7 + 5 + 3 + 7) * 9 + (4 + 6 + 4 + 6 + 3) + (9 + 3 + 8 * 6)) + 9 * (3 + 7 + 9 * (6 * 8) + 7) + (8 * 4)
4 + 8 * 2 + (6 + 6 * (7 * 7 + 3 + 6 * 6) + (9 * 4 + 9 * 3 * 6 + 7) + 6) + ((3 * 5 * 6 * 8 + 3) * 3 * (5 + 2 + 5 + 9) + (8 * 5 + 5 + 6 + 6) * 5 + 2)
9 + ((4 * 6 * 8 + 8 * 2 * 3) + 3)
2 * ((6 + 4 + 3) * 8 + 2) * 9 + 6
9 * (5 * 8 + 6) + 3 * 4 * 2 * 8
2 + (2 + 8 * (3 + 6 + 7 * 5) + 2 + 3 + 2)
8 * 8 + (3 + 7 + 2 * 3 * 3) * 6 + 7
(4 * 6 * 4 * 4 * 4) * 6 * (2 * 2 + 7 * (5 + 9 + 2) + (3 * 6 + 6) + 7) + 5 + 7 + 8
5 + (7 + 2 * 9) * (4 * 5 + 8 * 4 + 4) * 9 * 6
5 + 7 * (4 * 7)
4 + (8 * 6)
9 + 3 * 6 + (7 * (4 + 9 + 2) * 5)
5 + 4 * 6 + 2 + 8 + (7 + 5 + (6 * 8 + 2 * 3))
5 + (6 + 9 + (5 * 4 + 5) + 3 * 6 + 6)
6 + 5 + 5 + ((2 + 8 * 8 * 8) + (8 * 8) * (9 + 6 * 6 + 7 * 5) * 8 * 9) * 4 * 3
((2 + 5 * 9) * 3 * 9 + (9 + 6 + 3) * 9) * 4 * 9 * 7 * 6
5 + (2 + (3 * 4 * 4) * 5 + 4 * 9 * (5 + 7 * 3))
3 + 4 + 6 + 5 + 4
2 * 4 + 6
2 + 2 + (7 * (5 + 3 * 5 * 3 + 8 * 7) * 7 + (8 * 7 * 7)) + (8 * 9 * 5) + 8
3 * 8 + 5 + 4 * (3 + (9 + 4 + 3) + (7 + 6 * 4 + 9 + 9 + 7) + (9 * 4 + 7 + 7 * 9) * (5 * 7 * 3 * 7 + 9 + 2) + 4)
5 + 6 + (8 * 4 * 7) + 5 * ((8 * 8 + 5 + 9 + 2 + 9) + 3 + 5 * 9) + (3 + (6 * 2 * 3 * 7) + 5 + 3 * 8)
6 * 4 + 8 + (6 * 4 * 8 + 4) * 6 + 4
2 * (9 + 9 + (3 + 2 + 6) * 7 + 5 * 4) + 2 + 7 * 7 * 2
6 + 3 * 6 * 7 * (2 + (9 + 7 * 5 + 9 * 3 + 4) + (5 + 8 * 6) + 2 * (6 * 6 + 5 * 6) + 4) + 4
(9 * 8 * 9 + 7 * 8 * 6) + 3
(6 + 8 + 9) + 4 + (6 + (4 + 4 + 2 + 3 + 6 * 3) + (4 * 3 + 7 * 5 * 6) * 9 + 9) * 3
(3 + 6) + (3 + 4) + 3 + 4 * 4 + 2
((9 + 2 * 2) * 7 + 6) * 5 + 9 * 6 * (3 * 4 + 2 + (2 * 7) * 7 + 2) * ((4 + 3) + 8 + (4 + 2 * 2) + 8 + 8)
2 + ((7 + 8) * 2 + 6 + 3 * 7 + 9)
4 * (2 * (2 + 6 * 7 + 6) + (9 * 7 + 5 * 7 * 2))
(4 * (3 + 9 + 2 * 7 * 7 * 5) + 7 + 7 * (8 * 2 + 7 * 4)) + 9 + 6
((5 + 3 * 5 * 4) + 7 + 9 * 3 + 4 + 5) + 2
4 * 3 + 2 * 4 * 7 * 3
6 + ((2 + 5 * 6 * 6 * 9) + 7 * 8 + (8 * 4 + 7 * 3)) + 3 * 2
5 * 4 * 9 + 2 * (2 * (8 + 5 + 7 + 3 * 8) + 4 * 3 * 9) * 9
2 * 7 + ((4 * 7 + 6 * 2 + 8 + 9) + (6 + 2 * 8 + 5))
(8 * 2 + 4 + (6 + 5 * 4) * 3 * 6) * 4
((5 + 7 * 6) + 2 * 6 + 3) + 6 + 2 + 4 * 9
((3 * 8 + 2) + 5 + (8 + 8 * 3 + 9 + 6 + 3)) * 3
3 + 6 + 6 + (6 + 5 + 8) * (4 * 5 * 2 * 5)
3 + (2 + 2 + 6 * 8 * 8) + (7 * 3 + 3 + 7 * 5 + 7) + (6 * 6 + 4 * 7 + 6)
((4 + 6 * 7) * (5 * 4 + 4 + 4 + 2 + 8)) * 2 + (9 * (8 + 6 * 9)) + ((6 + 8 * 2) * 8 * 2)
5 + 2 + (4 * 9 * 4 * 2 + 3 * 4) + 8
((2 * 4) + (6 * 9) * 5) * 5 + 6
((5 + 3) * (3 + 9 * 7) * 5 * 6 + 3) * 3
3 + 4 * 5 + 6 * 7
(8 + 4 * 6 + 7 * 6) + (2 * 3 * 3 * 2 * 3) * 2 * 3 + 9 * 5
((6 + 9 + 4 + 9 * 7) + (3 + 4) + 7 + 2 + (3 * 9 + 4 * 5 + 9) * 4) * 4 + 7
8 * 6 * 9 + (9 + 3 + (3 + 5 * 8 + 7 * 9) * 5 * (4 + 6 * 9 + 3) + 6) + 4 + 6
9 * 2 * ((6 * 3 + 6) + 5) + (5 + 8 * 9 + 5 + (8 * 6))
((9 * 7 * 4 * 7 + 3 + 7) + 4 + 5) * 8 + 6 + 3 * 4 + ((9 * 7 * 8 * 3 * 8) + 3 + 5 * 6 + 2)
9 + (8 + 2 * 9 + 8) * (8 * 5 * 4 + 6 + 2 * (4 + 9 * 4 + 5))
3 + 7 * 5 * 4
(8 * (9 + 5 * 6) * (9 + 6 * 9 + 7 + 5) + 7 + 4 * 6) * 4
(4 * (5 * 5 * 5 * 7) + 3) * (6 * 3) + 3 + 4
3 + ((7 + 2 + 4) + 9 + 4) * (2 * 9 + 4 * 3 * 6) + 8 * 9 + 8
3 * (7 * 9 * 5 + 2 * 5 * (5 + 5)) + 8 * 5
5 * ((2 + 7 + 8 * 9) + (3 + 4 + 6 + 4 + 4 * 4) * 4 + (5 * 8 + 3) * 3 * (9 + 9 + 6 * 5 + 6)) * 5
(5 * 7 + 2 + 8) + 8
(4 + 6 * (2 + 8 + 5 * 6 + 7 + 4) * 3 + (6 + 4 + 7)) + (6 + 5 * 6) * 2 + (3 * 2 + 2 + 5 + 9 * 8)
5 * 2 + ((2 * 2 * 2 + 6) * (2 * 3 * 3 + 6 + 9 + 6) * 8 * 8) * (8 + 5 * 4 + 9) + 2 * 4
4 * (6 + 9) + 8 + 3 + (5 + 2 + 8) + 5
9 * 6 * 6 + 5 * 7
(2 * (6 * 9 * 8 + 3) + 3 * 3) * 3 + 8 * 7
(3 * 7 * (9 * 2 + 4 + 5 * 4) + 2) + 3 + 3 + 7 * 8
8 * (9 * (7 * 9) + 2 + 2 * 9 * 9) + ((5 + 5 + 9 * 2 * 6 + 3) + 9 * 6)
(9 + 8 + 5) + 5 + 9 + 4 * 5
8 + (7 * 6 * 5 + 3 * (8 * 5 + 9)) * 9 + 2 + 3 + 5
(9 * 9 * 2 + (2 + 9 + 3 + 7) + 5) * 4 + 4 * (4 * 9 * 2 * 6) * 7
7 * 9 * (4 + 9 + 7 + 9 + 3 + 5) + 4 * (3 + 6) * 4
5 + ((3 + 6) * 8) * 2
7 + (2 * 3 * 5 + 8) + ((7 * 4 * 9 + 4 * 6 * 2) * 2) * 3 + 2
8 + (3 + 6 + (4 * 7 * 9 + 2 + 2)) * 6 + 4 * 4 + 9
(4 * (3 + 2 * 6 * 3 + 5) * 4 + 9 + 8) + 7 * 7
(8 + 7 * 9) + 7 + (4 * (7 * 2 * 7) * 2) + (6 + 8 * (3 * 7 + 3 + 3 * 2 * 2) + (8 * 4 * 6 + 3))
9 + 3 + ((7 + 4 * 3 + 6 + 4) * 6 * 2 + 7 * 4) * 5
((3 + 7) + 4) + 3 * 5 + (3 + 7 * 9 + 6 * 3 * 2)
7 + (4 + 4 + 9 * 5)
((5 + 3 * 7) + 6 + 8 + 2) + 3 * 8 * (3 + 9 * 6 + 4)
3 + 8 + 7 + ((3 * 8 + 7 * 4 * 5) + 3 * 8 * 9 * 4 + 3) * 7
5 * 3 * ((7 + 3 + 7 * 5 + 3 + 4) * (8 + 8 + 3 + 7 * 8 + 6)) * 6 + 4
(4 * (6 + 3 * 7 * 4) + 7 * 8) + 8
6 * (8 + 6 + 5 * 4) + 3 + ((3 * 6 * 4 * 2 * 6) * 8) * 9 + 6
(4 * (9 + 9 + 9 * 7 * 8 + 9) * (3 * 5 + 8 * 4 * 3) + 2 + 9 + 4) + (7 + 5 + (9 + 3 + 8) * (9 * 7 * 5 * 4) * 5) + 2 + 2 * 5 + (2 + 5 + 9 + (2 + 8 * 5 + 5 * 2 * 7) * 2 + (6 + 3 * 8 + 2 * 6))
(4 * (7 * 3) + (6 + 3) * 6 + 6) + (6 * (8 + 2 + 8 * 4 * 7 * 5) + 7 + (5 * 9 * 5 + 9 * 2) * 7 + 8) * 5 + 2 + 6 * 4
6 * 9 + 8 * (7 * 4 + 5) + 6 * (5 * 8 * 4 * 2 + (3 * 6) + 6)
6 * 3 * (4 * 2) * 5
7 + 6 + (4 * 9 * 3 + 2 * 9 + 6) * 4 + 7 * 7
(2 + (2 * 7 + 9 + 4)) * 9 * 8 * (3 + 9 * 6 * 9) * 4 * 9
(8 * 6 + (3 + 8 * 5 + 6 + 9) * 7 + 6 * 7) + 6 + 4 + 8 * 3
(4 * (7 * 9 + 5 + 7 + 2 + 7)) * (6 * (2 * 2) + 9 * 4 + 5) + (3 * 3 + 4 * (2 * 7 + 4) + 3) * 5 * 6 + 9
2 + (7 + 7) + 9 + ((9 * 2 + 2 * 8 * 5) + (2 + 3 * 2 + 8 + 9) * 3 + 7 * 4 + 2) + 3
((7 + 7 + 6) + 6 + 8 + (4 + 4 + 6 * 5 * 3 * 7)) + 6 * 7 * 9
2 * 9 + 9 * 6 * 2 + (8 * (3 * 3 * 7 * 6) * 4)
4 * (9 * 2 * 8 + 3 * 5) + 7
9 + 3 + 9 + 9 + 2 + (5 + 9 * 3 * 2 + 3)
6 + 7 + (2 + 5 + 2 + 8 * 4 * 8)
(9 + 7 * 3) + 4 * 4
6 * 7 + 9 * (8 + 7 * 4) * 8
(8 * 5) * 6 + 8 + (4 * 5) * 6
2 * 8 * 7 + (8 * (4 * 2 * 2 * 9 + 9) + (5 * 7 * 5 + 7)) * 8 + 5
5 * (5 * 8) + 8 + (9 * 8 * 2) * (5 + 4 * 3) * (4 * 7 * 6 + 2 + 4)
3 + 6 * 8 + (5 * (6 * 3) * 9 + 5 + 4 * 8)
7 * 2
8 * (7 + (7 * 8))
4 * ((8 * 2 + 2) + (9 * 5 * 2 + 3 + 6) * 6 * (3 + 5)) * 6 + 7 * 3 + 7
4 * 6 + 7 * ((3 * 5 * 4) * 7) * (2 + (7 * 3 * 4) * (5 + 3 + 6 * 8 + 7 + 4) * (5 + 7 + 7 + 3 * 3)) * 2
(8 * 8 + 2 * 4 * 7) + 9 * 8 * 6 + (8 * 4 * 2)
(4 * 8 + (6 * 7 + 5 + 7 + 4) + 8 + (9 + 3 * 8 + 8 + 6 + 9) * 3) * (4 * 4 + (6 * 7 + 7 * 9 + 9)) + 8
3 + (9 * 8 * 4 * 9 + 8 * 7) * 9 * 2
6 + 4 * (8 + (6 * 8) * 7 * 5) + 9 + 4
(8 + 9 * (4 + 3 + 6 + 2 + 5 + 8) + 6) + 7 + 9 * 3 * ((7 * 8 * 6 * 5 + 4) + 7 * (9 + 2 + 9 + 8 * 4) + 8 * 4 + (8 * 8 * 2 + 9 * 4)) + 6
(9 * 8 + 4 * (6 + 9 * 3 * 3 + 3 * 4) * 8 + 7) + 5 * (4 * 8 * (2 * 3 + 2) + 3 + 5 + 2) + ((2 * 6) * 8 + 6 * 4 + 8) + 6 + 9
((9 + 3 + 9 + 7) + 3) + 7 * ((8 + 6 * 7 * 4 * 7) * 8 * 8 + 2 + 6) + 3 * 8 * 4
(5 + 3 * 2) + ((4 + 3 * 5 * 5) + 6 + 7) + 7 * 7 + 8
4 + (9 + 4 + (9 * 7 * 8) + 5 + (5 + 7 * 5 * 8) + 8) + (6 + 5 * 5 + 7 + 9 * 8) * 9 + (4 + 4 * 8) + (5 + 4)
3 * (3 * (6 + 5 * 5 + 4 + 9 + 9) * 8 + (6 * 3 * 2 * 5)) * (6 + 2) * (4 * 6 * 8 * 5 * 5 * 2)
4 + 7 * (6 + 2 * 3) + 9 * (3 * 3 + 8 + 5 * (8 * 7 + 3 * 5) + 8)
5 * (2 + 9 + 9 + 8 + 4 * (7 + 2 + 9 + 2 * 6 + 8)) + 2
5 + (7 * 8 + 8 + 7 + 3) * 2 + 2
3 + 8 * 8 * (9 * (7 + 5 * 5 * 7) * 6) * 2
6 + 8 + (3 + (5 * 8 * 6 + 4 + 3 + 4) + (2 * 7 + 4 * 4) + 5) * (4 + 8 * 6 + (9 * 6 + 7 * 3) * 9 * 3)
4 + 8 * (2 * 9 * 6 + (4 + 9) + 8) * 9 + 6
5 * 3 * (3 + 7 * 7 * 3 * (6 + 5 * 7)) + 8 * 9
(2 + 8 + (6 * 8 + 5 * 5 * 2)) + 5 * (6 * 5 * 6)
4 * 5 + (7 * 4 * 3 + 7 * 7) * 8 + ((9 + 9 + 5 * 3 + 2) + (2 * 7 * 8 + 3) + 7 * 2 + (5 + 8 + 8))
7 * (4 * 2 * (8 * 8 * 7) * 3 * 9 * (2 * 4 * 3 + 2))
6 * 7 + 8 * 8 * (8 + 2 * 5 + 8 * 6 * (4 + 8 + 3 + 3 * 7)) + 6
8 + 2 * 2 + (7 + 8 + 5) * (6 + 9 * (4 * 6) + 3 + 8 * 7)
5 * ((3 + 8 + 4 * 4) * (4 * 5 * 8 * 8 + 8 + 8) + (8 + 7 * 9) + (6 + 5) + 2 * 9) * (7 + 8 * 7 * 4)
(3 + 7) + 9
9 * 5 + 7 * (3 + (6 + 3)) + 5 * 8
2 + 6 * 5 + 6 + ((8 * 8 * 9 * 4 * 9 + 6) * 4 + 4 * 2)
3 * 2 * (6 * 8) * 8 * (2 * 8 * 8 + (4 + 6 * 2 * 4)) * 5
4 * (8 + 7 + 7 * 8 + (7 + 5)) + 6 + 8 + 7
(5 + 4 + (7 * 7) * 2 * 4 + 3) + (8 * (6 + 6 * 9 + 7 * 7 * 3) * 2) * 3 + 5 + 9 + 7
8 + (8 * (5 + 3 * 7 * 6 * 7) * 9 * 9 + 7) * 8 * 4
7 * (6 * 8 * (6 * 3 + 9 + 8 + 8) + 7) + 7 * 7 * 3 + 4
2 + (9 * 4 * (9 + 7 + 6) + 3 * 8 + 7) + 7 * 2 + (4 + (7 + 2 + 9 + 9 + 7 + 2) + (9 * 3 + 4 + 4 + 3 + 8))
(4 + 4 * (4 + 7 + 3 + 3 * 9 + 8) + 3) * 7 * (7 * 6 + 9) + 4 * 4 + 5
8 + 6 * 8 * 5 + (7 * (4 + 9 + 3 * 6 + 8) + (7 * 9 * 2 + 3 * 2 + 8) * 6 + (4 + 7 + 4))
(3 * (4 * 7 * 3 * 8) * (6 + 7 + 6 * 7 + 7 * 2) * 8 + 5 * 7) + (9 + 8 + 7 + 5 + 6 * 7) * 5 * 4 * 5
3 + 3 * 2 + ((2 * 3 + 2 + 6 * 6) * 6) * 8 * (3 + 7 * 8 + 6 + 3 + 8)
(5 * 4) * ((3 * 2 + 9 * 4 + 5 + 7) + (7 * 3 * 7 + 9 * 7 * 5) * 7 + 4 + 6)
3 + 2 + 5 * 7 * 9 + 2
(4 + 6 * 3 + 3 * (6 * 3 + 5) * (6 * 3 + 5)) + 2
5 + 8 + 6 * 3 + 3 * 2
(8 + 7 * 4) + 7 + 3 + 4
(3 + 3 * 9 + 7 * 7 + 3) + 6 + 5 * (2 + (4 * 2 * 2 + 9 + 6) * 2) * 6 + (7 + 2 + 7)
9 * 2 * (3 + (8 + 7 * 5 + 3)) + ((9 + 3 + 6 + 7) * 9 * 8 + 5 * 6) + 5
(6 * 4) * 7 + 4 + 3 + 5 * 4
8 * 2 + (6 * 4 + 3 + 6)
(4 + 5 * 2 + 9 * 9 * 6) * 8 * 7 * ((4 * 3 * 3) + 5 * 6 * 2) + 9
(8 * 5 * (5 * 7 * 5 + 4 + 5) * 2 + 9 * 6) + 4 + 6
2 * 5 + ((2 + 8) + 3) * 5 + 7
5 + ((8 + 2 * 6) + (2 * 5 + 6 + 4 * 8 * 7) + 3 + 7 + 8)
6 * 2 * (6 + 8 * (3 + 7 * 5) * 2 * 7) + 8
2 + 2 + ((8 + 2) * 8 * 8)
3 + 7 + ((8 * 2 + 3) * 9 + 2 * 4) + (9 * 9 * (3 + 7 + 3 + 5 + 4) + (8 * 5 + 4) + 9 + 7)
3 * 5 + ((4 * 8 + 8 + 7) + 8 * (3 * 3 * 7 + 9 * 6 + 3) + (9 + 2 + 3 * 9 * 8)) * ((7 * 8) + 9 + 2 + 9 * 2)
(7 + 9 + (2 + 8 + 7 * 7 + 4) + 9 + 6 + 7) + 6
2 + ((2 * 9 * 7 + 4) + 3) + 3 * (8 * (9 * 4 + 7 * 3 + 3) + 8 + 5 + 7) * (9 + 9 * 5 + (8 + 9) + 2 + 5)
8 + (3 + 5 + 9 * 7) + (7 * (9 + 8) + 8 + (9 * 7 + 8 + 6 + 8)) * 2
(3 * (6 + 6 * 6 + 2) * 9 + 5 + 6) + 8
6 * 5 + ((9 + 5 + 5) + (6 * 5 * 7 * 7) + 7 * (9 * 7 * 4 + 6)) + 7
2 + 7 * 7 + 2 * ((5 * 8 + 9 + 9 + 8) * 9)
((2 * 8 * 4 + 2) + 3) * 4 + 9 + 3 + (7 * 7 * 4 + 2 * 2) * 3
6 * 8 + ((3 + 6 + 4 * 3) + 6) * 3 + 9
(5 + 2 * 3 * 4) * 3 + 7 + 7
((7 + 4 * 7 + 7 * 9 * 8) * 3 + 9) * (7 * 2 + 9 * 9 * 8) + 5 + 8 + 6
6 + (2 + (9 * 6) * 4 + 5 + 5) + (5 * 2 + 6 * (2 + 2) + 6 + 9) + 5
6 * 3 * (6 + 5 + 4 * 8 + (9 + 2 * 4 * 5 + 4 + 7)) + 5
9 + (2 + 3) * (6 + 5 * 5 * 2 * (3 * 6)) + 6 + 8 + (4 + 8 * 9)
((7 * 5 * 5 + 9 + 3) * (7 + 7) + (2 + 6 + 6 * 3 + 7) + 5) + 6
8 + 2 * 9 + 3 + 4
(7 * 8 * 4 * 9 + (9 * 9)) * 4 + (4 + (7 * 3 + 6) + 2 + 4 + 9 * 5) + 9
(4 + 5) * 8 * (5 * 5) * 4 * 8
(4 + (5 + 4)) * 7 * 4 + 9
3 + 8 * (3 * (5 * 2 + 6) * 9 + (4 * 2 + 6 + 7) + (9 + 9 * 8)) + 5 + ((2 + 7 + 8 + 8) * (7 + 8 + 3 * 9)) * 9
8 * 9 + ((8 * 7 + 4 * 5 + 8 + 4) + (3 + 8 * 4) + 8 * 3 + 3)
6 + (6 + (2 * 5 + 2 * 8)) * 6 + 8 + 4
((9 * 5 * 5 + 8) * 9 * 2 * 6 + 3) + 6 + 6 * 6 * ((5 + 3 * 2 + 4) + 8 + 8 + 6 * 4)
((5 * 3) + 6 + 5 * 5) * (6 * 8) + 3
((9 * 5 + 6 + 2 * 5 + 3) * 6 * 6 * 7 * 2 * 2) + 6 * 8
2 + 9 + 3 + 5
5 + 4 + 3 + 4
6 + (5 * 2 + 8 * 4 + 9)
(7 * 5 * 3 * 9 * 9) + 6 + 5
8 * 8 + (8 + 9 + 5 * 4) + 3 + (5 + 2 + 6 + 6) + 9
9 + ((7 * 2 + 7 * 4 + 9) * 8 + 5 + 6 * 3 * (8 + 4)) * 2
5 * 8 * ((9 * 5) * 4 * 7 + 2 + (4 + 4 * 3 * 5) * 7) * 4 * 8
4 * 9 * (3 + 4 + 9 * 7) + 2 + (5 + 6) + ((6 * 2 * 8) + 9 + 5 + 2)
6 + 7 + (4 * (5 * 7 + 9) * 2 + (5 * 3 * 7))
(9 * (9 * 3) + 9 + (3 + 2) * 6 + (4 + 4 + 9 + 4)) + 7 + 8 * (6 + 8 + (6 * 9 * 2 * 8)) * (8 + 6) + (8 * 6 + 2 * 7)
5 * ((4 + 2) * 2 * (2 + 9 + 2 * 4 * 3 * 4) * 4 + 8 + 3)
8 + 6 * (7 * 6 + 9 + 3 + 6)
(5 * (8 * 7 + 4) + 3) + 2 * 5 * 4
9 + (2 * 3) + 3
4 + 5 + 6 + 8 + 4 * 9
(3 * 3 + 4 * 4) * (4 + 7 + 6 * 6)
3 + 9 + (5 * 8 + 7 * (3 * 5 * 8 * 9 + 7 + 6) + 8)
7 + (8 + 5 * 9 + 6 * 3 + (9 + 3 * 7 * 5 + 3 * 2)) * 7 + 5
4 * 6 + 3 * (5 + (6 + 4 + 9) * 6) + 2
2 * 3 + 8 + 9 * 6 + (2 + 3 + 5)
8 + ((3 * 4 * 7 * 2) + 4 + 5 + 2) * 9
7 * 4 + 2 * 4 + 9 + (3 * 7 + 2 * 6 * (8 + 9 * 9) * 5)
4 * 3 * (7 * (8 * 5 * 8 + 3 + 9) * 3 * (4 * 8) + 4 + (9 * 3 + 9 + 6 * 4 + 9))
7 * 6 * 7 * (3 + 4 * 3) * (5 + 5 + 2) * 7
2 + 6 * ((4 * 3 + 6) * 5 * 8 + 4 * 2 + 9) + 6
6 + 4 + (5 * 5 + 7) * 8
(5 * 3 * 8) * (6 * 6)
5 * (6 * 5) + 9 + 7 + (6 + 6)
((3 + 6 * 6 * 5 + 3) + (6 * 3 + 8 + 8 + 7) * 2 * (3 * 5 + 3)) + 3 * ((6 * 6) + 2 + 4) + 3 + 5 * 5
9 * (2 * 6 * 4 + 7 + 5 + (8 + 4 + 7 * 2)) + 5 + (3 * (4 * 5 * 6 + 6 + 4 * 4) * 5 + 8)
8 + 3
3 + (2 + 4 * (7 * 4 + 9 * 9) + 2 + 3) + 6
((5 + 9 * 6 + 3) + 2) + 5 * 2
3 + 8 * 2 * 4 + (2 + 3 + (3 + 9 * 6)) + 5
6 + 5 * ((9 * 9) * 9 + 4 + (8 + 3) * 8 * 5) + (8 * 8 + 2 + (5 * 6 * 5 * 3 + 9 + 7) + 5) * 5 * 5
(6 * (5 * 3 + 9) * 3 * (7 + 4 + 8 + 3 + 8 + 6) * 5) + 3 + 7 * 2 * 9
6 + 3 + (2 * 2 + 9 + (4 * 4 * 2 + 3 * 4 * 9)) + 9 + 8 * (7 * 2)
((2 + 7 * 8) * 8 + 7 + 3 + 8) * 4 * 9
9 + 9 * 5 + 7 + ((9 * 9 * 4 + 4 + 3 * 7) * 5 * 5)
(6 * 7 + 3 + 4 + (7 + 9 + 3 + 2)) + 3 + 6 * 9 + 8 * 7
((2 + 5) + (8 + 8 * 8 * 2 * 4 * 9) + 3 + 5) + 3 + 8
4 * 4
6 * 8 + (9 + 2 + 4 + 3 + 2 + (8 * 2 + 3 + 2 + 9)) + 8 + 3
7 + 2 + (2 * (7 + 2 + 9 * 3 * 5 * 8)) + 4 + 5 * 4
4 * 6 * 8
5 * 4 + 4 + 2
6 + 3 * (8 * 4 + (5 * 6 + 2))
2 * (2 + (2 * 9) + 7 + 9) + 6 * 7
6 * 3 * ((2 * 5) * 3 * 5 * 2) + ((2 * 8 * 7 + 9) * 3 + 5 + 2)
(2 + 3 + 9 + 9 * 7) + (8 * 8 + 2 * 7 * 3) + 3 + ((5 * 5 + 4) * 2 * (3 + 8 * 6 + 2)) + 5
6 + ((3 + 8 * 3 * 9 * 7 + 3) + 2 * 3) * 4 * 9 + (3 + 2 * 7)
((2 * 4 * 4) * (2 + 5 * 4) * (9 * 7 + 3 + 9)) + 7 + 7 + 8 * 4 * (5 * (4 * 9) + 4 * (7 + 9 * 9 * 2 * 9) + 3)
2 + 2 + ((2 + 5 + 7) * 8 + 3) + 5
3 + ((6 + 4 + 9 + 9 + 5 + 6) + (6 + 7 + 3 * 2 * 8 + 3) + 9 + (3 * 2 * 9) + 9 * 3) + 9 * ((6 * 7 * 9 + 9) + 3 * 3 + 7)
4 * 9 * 4 * 7 * (4 + 4) + 3
2 * (7 * 5) * 2 + ((8 + 2 + 6 * 4 + 6 * 4) * 4)
6 * (2 * 8 * 4 + 6) * 7
2 * 3 + 7
(7 + 8 * (8 * 6 * 4) * 5) + (9 + 9 * 3) * 2 * 9
4 + 3 * (5 + 5 * 9) * 9 * 2 + 8
8 * (2 + (5 * 8 * 3 * 8 + 7) + 3 + 7)
(2 + 2 * 2) * 2
(4 + 2 * (8 + 4)) + 2 * 8 * (6 + 7 * 9 * (3 * 2 + 3) + 7 * 9) * 3
(9 + (5 + 2) + 7 + 6) * (9 * 4 * (4 + 7 * 7 + 6 + 5) * 7) + 7 * 7
2 * (3 * 7 * 7 + 7) * (6 + 2 * 6) + (9 * (4 + 2 + 9 * 8) * 9 + 7 + 7)
(6 + 7 + 8 * (6 * 9 + 2) + 5 * 3) * 4 * (6 * 8 * 5 + 7 * 3) + (8 + 2 + 8 + 2 + 8) * 5 * (6 + 9 + 7 * 8)
2 * 8 * (6 * (4 + 5 * 2) + (3 * 4 * 2 * 3 + 7) * 7 * 5)
3 + (9 + 3 * 7 + (8 + 4 + 2) + 3) * 4
9 * (8 * (3 * 7 + 2) + (8 * 3 + 7 + 3 * 4 * 2) + 2 * 2 + 8) * 4 + 2
7 * 3 * 6 + (7 + 5)
(8 * 7 * (3 * 2 * 9 * 8)) + ((4 * 3 + 7 + 8) + (6 * 8) + 3 + (5 * 9 + 8 + 7 + 5) * 8 + 5) * 9 + 5 + (4 + (9 * 9) + 5 * 3 * (4 * 2)) * 8
((3 + 8) + 6 * 5 * 6 * 5 * (4 + 8 * 9 * 5 * 9 + 9)) * 9 * 3 + (6 * 3)
(6 + 5 * 2 + 5 + 9) + 4 * (9 * 6 * 5) + 6 * 9
((7 + 5) * 2) + 7 * (4 + 4) * 9
(5 + (5 + 2 * 5 * 6)) * 2 + 4
8 + (3 * 4 * 9 + (6 + 3 * 5 * 2) * 9 * 9)
3 * 5 + 2 + 2 * 9 + (4 + 6 * 9 * 3)
4 * 6 * ((5 * 7 * 8) + 6) * 9
3 * 8 + (8 + 6 + (9 * 4 + 5 + 4)) * 9 + 9 * 7
(6 * 2 + 3 * 8 * 4 * 2) * (3 * 2 + 8 + (8 * 9 + 9 * 2 * 2) * 8) * 2 * 3
8 * 4 + 4 + 2 + (4 * (6 + 2 + 8 + 6 * 6) * (5 + 6 + 9 + 2 * 2) * (3 + 7 + 8 + 6 * 8) * 5 * 7) + 3
(2 * 5) + ((7 + 6) + 9 * 7 * (7 + 5 * 6 + 3 + 9)) * 4
2 * ((4 + 2 + 6 * 5 * 9) + 4)
(5 * 9 * 2 + 5 + (4 + 9 * 4 + 8) + 2) + 8 * 3
4 * ((6 + 7 * 3 * 9 * 8) + 5 * 2) * 2 + (6 + (9 + 5 + 3 + 7 * 5) * 2 * 2 + (9 * 8 + 7 + 7 * 6)) * (4 * 7)
2 + 9 * 6 + 6 + (4 * 5 + 3 * (2 * 2 * 4 * 5 + 7 + 6) + 7 * 5)
7 + ((9 * 4 + 7 + 9) + (4 + 6 * 7 + 4)) * 5 + ((9 + 8 * 5 * 9 * 9) * 9 + (3 * 2 * 6) * 2 * 6 + (3 + 7))
(9 * 5 * 9) + (3 * 9 + 2) * (2 * 6 * 7 * (6 + 3) * 6 + 4) + 3 + 8
(8 * (8 * 3 * 2)) * (4 + 5) * 7 * 3
7 + 7 + ((2 * 2) * 7 + 4 + 7 * 9)
(6 + 5 + 9) * 6 + 2 * 9 * 9 + 3
4 + 2 + (3 * (4 + 7 * 6 * 7 + 3 + 3) + 7) * (2 + 2 + 7 * (6 + 2 + 8 + 3 * 8 * 4) + (8 + 2)) + (7 * 8)
(4 + 7 + (3 * 2 + 9 + 5)) + 9 + 6 * 7 * 2 + (5 + 5 * 3 + 7 + 9 + 9)
6 * 9 * 7 * (3 + 5 + 2 * 4 + 6 + 6)
(5 * 3 * (6 + 8 + 9 * 6)) * 8
(6 * 5) + (7 + 4) * (4 + 9 + 4 + (2 * 3) * 7)
4 + 6 * 5 * (2 * 2 * 2 + 3 + 6 * 4) + 7 * 9
9 * 5 * (8 * 9 * 6 + 5 * (3 * 5 + 9 + 9 + 6) + 5)
3 * (9 + 7 * 2) * 6
5 + 9 + 6
6 + (7 * 5 * 9 + 3 + (6 * 3 + 8 + 4 * 9)) + 3 * 5 + 3
7 + 5 * ((2 * 4 * 4) + 3 + 4)
(7 * 8 + 2 + 8 * 4) + (7 + 3) + 7 + 7 * 6 + 3
(8 + 6 + 5 + 5 * (5 + 3 * 3)) * (8 * (5 + 9) * 4) + 5 + 7 + ((8 + 8) * 3 * 9 * 9 * 6 + 2)
(8 * 2 * 5 + (8 * 8 * 2)) * 4 * 2 + 3 * 2
5 + 4 * 2 * 9 + (6 * 3)
2 + 9 * ((5 + 3) * 3 * 9 + (6 + 4) * 6) + 9 * 7 * 4
6 + 5 + 6 * 9 + (2 + 3 + 9) + ((4 + 7) * 6 * (7 + 2 * 3) * 2 * (7 * 2 + 3 + 7 * 9))
2 + 7 * (6 * (9 * 6 + 2 * 3 * 7 + 5) + 9 * 2 * 5) * (4 * 5) * 5
(8 + 7 * 3) + 6 + 7 * 6 + (5 + 2 * 5 * 2 * 6 + 7) * (7 * (4 + 8 + 7 + 6 + 2 * 2) * 8)
(8 * 2) * 3 * 4
2 * 7 + (8 + 7 + 8)
((5 * 8) * 3 + 8 + 7) * 3 * 5
((3 * 4 * 6 * 8 + 6) * 6 + (4 * 9 * 9 * 7 * 6) * 6 + 8) * 7 + 9 * 2
(3 * 9 * 2 + 6 * 7 * (3 + 7 + 9 + 4 * 3)) * 2 * 8 * 9 * (2 + 3 * 7 * 9)
(6 * 8 + 6 + 2) * 7 + 8
7 * (9 * 2 + (2 + 6 * 2 * 5 * 8)) * 3 + 8
7 * 2 * 6 + 6 * 2 * 8
5 + 8 + (4 + 9 + 8 + (9 + 8 + 6 + 4) * 3 * 6)
(3 + (7 + 9 + 4 + 5 * 6 * 7) + (6 + 4 + 3 * 7 * 2)) * 2 + 3
6 + 7 + (6 * 6 + (4 * 5 * 5 + 3 + 6 + 4) + 3 + 9)
5 * 2 + 6 * 6 * (2 * 8 * 8 * 2 * 2 + 2)
5 + 7 * 8 + (7 * 4) * 4
9 * 8 + 9 + (4 * 6 + (8 + 2 + 4 * 7 + 3) * 4 * (2 * 8 * 5 * 3))
5 * 6 + 6 * 7 + (5 * 8 * 2 * 2)
3 + 8 * 6 + 7 * 7 + ((6 * 5) + 6 + (7 * 9) + 3 + (3 * 2 + 5))
8 + (9 + (6 + 5 * 6))
3 + (9 * 7 + 6 * 6 * 9 * 2) + 7 * 7 + 8
6 + 3 + 4 * 2 + 9 * (9 * 6 * 6 + 7 + 7 + (4 + 7 + 8 * 4 + 6))
6 + (6 * 4 * 5 + 3 * 9 * (6 + 8 * 6 + 4 * 7 * 3))
9 * (3 + 9 * 7)
7 + 3 + 3 + 9
7 * 3 * ((6 + 8) + 5 * 4 + 8 * 9 * (9 * 3)) + 9
7 + 3 * (2 + 2 + (5 * 7 + 9 * 4 + 4) * 5) + 4 * 2 * 2
(4 + 2 * (4 * 8)) + ((5 + 9 * 8 + 8 + 8 + 4) * 8 + 9) * 5
2 * (4 + 9 + 8) + 8 * 3 * 8
((5 + 5) * 5 * 7 + 9 * 3 * 9) + 9 * 6 + 9
(7 * 4 * 6 * 9 + 4) * (9 * 2 * (7 * 4 * 7) * (7 + 8 * 6 * 8 * 3 * 7)) + 3 + 3 + 2
(5 * 7 + 6 * 4 * 7 + (9 + 2 * 2)) * 7 * 3
3 * 3 + ((2 * 9 + 5 * 3) + 8 + 5 + 9) + 2 + 8 + (9 + 9 * 4)
((7 + 3) * 9 * 3 + 9 + 4 + 9) * ((5 + 4 + 2 + 2 + 2) + 6 * 3 * 8)
8 + 9 * 5 + (9 + 2 + (3 * 6) * 2 * 4 + 3) * 5 + 8
(9 * (5 * 3) + 8) + (2 + (9 * 6 + 8 * 6 + 8) * 5 + 6 + 5 * 7) + 7 + 2 + 8
8 * 8 + 6 + (4 + (7 + 6 * 8 + 7 + 8 * 7) + (9 * 3 * 5 * 4 + 3) * 7 * 9 + 8) + 7
2 * 8 * 4 * 5 + (8 * 4 * 6)
5 * (3 * 4) + 8 * 5
9 * (6 + 4 + 9 + (6 * 3 + 4 * 4 * 9 + 9)) * 9
4 + 3 + (3 + 6) + ((5 * 6 * 6 * 9) * (6 + 2) + 6)
5 + 3 + 3 + (7 * 3 * 5 + 5 * 3) + 9
(2 + 6 + 8 + 3) * (9 + 7) * 6
(6 + 7) * 9 * 8 + 3 + (3 * 7) * (3 * 4 * 6 + (6 * 6) * (8 * 6 + 7 * 8))
9 + (7 + 5 + 3 * 5) + 7 + 6
(7 * 3 + 9 * 2 + 5 * 8) * 9 + 3 * 9 * 9
5 * 6 * 2
5 * 2 + 7 * (8 * 3 + 4 * (7 * 9 + 2)) * (4 + 2 * (8 * 5 * 5 * 9 * 3) * 5 * 4 + 6)
4 * ((3 + 3) * (5 * 7 * 2 * 4) + (9 * 5 + 9 + 3 + 5 * 6) * 6 + 7) + 3
6 + 7
3 + 4 * ((5 + 7 + 4 + 2 * 6 + 2) + 6 * 7)
(4 + 6 * 2 + 8 + 5 * 5) + 9 * 5 + 2
2 * 8 * (7 + 6 + (9 + 2 * 8 + 7)) * ((3 * 5 + 6 + 4 + 5 * 3) + 6 * 8 + 9 + (8 + 9 * 6 * 4) + (5 + 4 + 3 * 2 + 9)) + 6
3 + 7 + 3 + ((7 * 9) * 9) * 3
6 * 4 * 3 * 7 + (4 * 2 * 2 + (6 + 9 * 6))
((8 + 6 + 2 + 3 + 7 + 2) * (7 * 2) + 6) * 8 * 4
6 + 7 * 4 * 4 * (8 + 5 + 8 + 9 * 9) * 7
(5 + 9) * (4 * 8 * (4 + 9 * 4) * 4 + 3) + 6 * 5 + 9 * 3
3 * 4
(3 * 2 * (6 * 5 * 5) * 3) + 6 * 4 + (8 + 9 + (6 * 4)) + (3 * 9 * 5 * (6 * 3 + 2) * (3 * 2)) * 7
5 + ((2 + 2 * 9 * 9 * 5 * 8) + 7 + 9) * 4
(7 + 2) + 4 * 4 + (7 * 4) * (5 + 9 * 2)
(4 + (2 * 8 + 2 * 6) * 3 + 2) * 9 * 3 * ((2 * 6) + 6 * 3 + 7 * (9 * 8 + 7 + 4)) + 2
9 + (4 + 8) * (7 * 3 + 4) + 7
9 + 5 * 9 * ((2 + 3 + 3 + 6 + 5) + 8) + 2 + (3 + (9 * 9) + 2 * (5 + 8 + 8 + 7) * (8 + 7 + 5 + 5 * 7 * 7) * (9 + 5 * 8 * 5 * 8 + 2))
((6 * 9 * 5 * 3) + 5 + 3) * 9
(8 * 6 + 7 + 2 + (4 * 7 + 7 + 8 + 8) + 8) + 4 + 3
4 + (9 * 4 + (2 + 4 * 3) + 9 * 9 + 5) + 5 * 2 * 4
6 + 2 + 4 + (8 * 8 * (7 * 2 + 7 * 2 * 9 + 6) + 9)
8 * 8 * 6 * 5 * 5
4 * 3 + (5 + 2 + 6 * (7 * 8 * 7 + 5) * 5 * 8) * (9 * (6 * 6 + 3 * 5) + 9 + 6) + 6 + (2 + (2 + 5) + 3)
3 + (6 * 9 * (4 * 4) * (7 + 2 + 9 * 3 + 5 + 8)) + (3 * (6 + 7 * 4 + 9 * 8) + 3 * 5 + 9 * (5 + 9))
(3 + (3 + 3 * 6) * 4) * 5
""".trimIndent()

val test1 = "1 + (2 * 3) + (4 * (5 + 6))"
val test2 = "2 * 3 + (4 * 5)"
val test4 = "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"

var nextIndex = 0
var parseText: String = ""

fun main() {
    val terms = input.lines().map {
//        println("---- $it")
        parseText = it
        nextIndex = 0
//        parseTermPart1(it)
        parseTermPart2()
    }

    var totalSum = BigInteger.ZERO
    terms.forEach { term ->
        val termResult = evaluateTerm(term)
        totalSum += termResult
    }
    println("Total sum: $totalSum")
    // part 1 answer: 280014646144
    // part 2 answer: 9966990988262
}


fun evaluateTerm(term: Any): BigInteger {
    val result = when (term) {
        is Long -> term.toBigInteger()
        is Term -> {
            val arg1: BigInteger = evaluateTerm(term.term1)
            val arg2: BigInteger = evaluateTerm(term.term2)
            val termResult = when (term.op) {
                Op.Plus -> arg1 + arg2
                Op.Mult -> arg1 * arg2
            }
            termResult
        }
        else -> throw IllegalArgumentException("Unknown term: $term")
    }
//    println("$term   =   $result")
    return result
}

fun parseTermPart1(line: String): Any { // return Term or Long
    val term2: Any
    val textBefore: String
    if (line.endsWith(")")) {
        val startParen = findStartParenthesis(line)
        val parenText = line.substring(startParen + 1, line.length - 1)
        term2 = parseTermPart1(parenText)
        textBefore = line.substring(0, startParen).trim()
    } else {
        term2 = Integer.parseInt(line.last().toString()).toLong()
        textBefore = line.substring(0, line.length - 1).trim()
    }
    if (textBefore.isEmpty()) {
        return term2
    }
    var op = when (textBefore.last()) {
        '+' -> Op.Plus
        '*' -> Op.Mult
        else -> throw IllegalArgumentException("Can't find Op in end of '$textBefore'   of line:   '$line'")
    }
    var term1 = parseTermPart1(textBefore.substring(0, textBefore.length - 1).trim())
    return Term(term1, op, term2).also {
//        println("Parse: '$line'   => $it")
    }
}

fun parseTermPart2(): Any {
//    println("   parse Term: ${parseText.substring(nextIndex)}")
    val arg1 = parsePlus()
    skipWhiteSpace()
    if (isEnd()) {
        return arg1
    }
    if (parseText[nextIndex] != '*') {
        return arg1.also {
//            println("Parse term: $it")
        }
    }
    nextIndex++
    skipWhiteSpace()
    var arg2 = parseTermPart2()
    return Term(op = Op.Mult, term1 = arg1, term2 = arg2).also {
//        println("Parse term: $it")
    }
}

fun parsePlus(): Any {
//    println("   parse Plus: ${parseText.substring(nextIndex)}")
    var arg1 = parseArg()
    skipWhiteSpace()
    if (isEnd()) {
        return arg1
    }
    if (parseText[nextIndex] != '+') {
        return arg1.also {
//            println("Parse plus: $it")
        }
    }
    nextIndex++
    skipWhiteSpace()
    var arg2 = parsePlus()
    return Term(op = Op.Plus, term1 = arg1, term2 = arg2).also {
//        println("Parse plus: $it")
    }
}

fun parseArg(): Any {
//    println("   parse Arg: ${parseText.substring(nextIndex)}")
    skipWhiteSpace()
    val nextChar = parseText[nextIndex]
    if (nextChar.isDigit()) {
        return Integer.parseInt(nextChar.toString()).toLong().also {
            nextIndex++
//            println("Parse arg: $it")
        }
    } else if (nextChar == '(') {
        nextIndex++
        return parseTermPart2().also {
            require(parseText[nextIndex] == ')')
            nextIndex++
//            println("Parse arg with paren: $it")
        }
    }else {
        throw IllegalArgumentException("$nextChar is no Arg at $nextIndex in $parseText")
    }
}

fun skipWhiteSpace() {
    while (!isEnd() && parseText[nextIndex] == ' ') {
        nextIndex++
    }
}

fun isEnd(): Boolean = nextIndex == parseText.length

fun findStartParenthesis(string: String): Int {
    var i = string.length - 2
    require(string[i + 1] == ')')
    var openParen = 1
    while (openParen > 0) {
        when (string[i]) {
            '(' -> openParen--
            ')' -> openParen++
        }
        i--
    }
    return i + 1
}

// term1 and term2 is Long or Term
data class Term(val term1: Any, val op: Op, val term2: Any) {
    override fun toString(): String {
        return "($term1 $op $term2)"
    }
}

enum class Op {
    Plus,
    Mult;

    override fun toString(): String {
        return when (this) {
            Plus -> "+"
            Mult -> "*"
            else -> throw IllegalArgumentException("Unknown enum: $this")
        }
    }
}